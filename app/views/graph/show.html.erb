<!-- Container centralizado -->
<div class="d-flex justify-content-center align-items-center" style="height: 100vh; margin-top: 0;">
  <!-- Div do grafo -->
  <div id="graph" style="width: 80%; height: 80%; position: relative;">
    <!-- O svg será inserido aqui -->
  </div>
</div>

<!-- Adicionando a biblioteca D3 -->
<script src="https://d3js.org/d3.v6.min.js"></script>

<!-- Script para renderizar o grafo -->
<script>
  document.addEventListener("DOMContentLoaded", function () {
    fetch("/graph_data")
      .then((response) => response.json())
      .then((data) => {
        const width = 1100; // Largura fixa do SVG
        const height = 571; // Altura fixa do SVG

        // Cria o SVG
        const svg = d3.select("#graph")
          .append("svg")
          .attr("width", width)
          .attr("height", height)
          .attr("viewBox", `0 0 ${width} ${height}`)
          .attr("preserveAspectRatio", "xMinYMin meet");

        // Configuração da simulação de força
        const simulation = d3.forceSimulation(data.nodes)
          .force("link", d3.forceLink(data.links).id(d => d.id).distance(150))
          .force("charge", d3.forceManyBody().strength(-300))
          .force("center", d3.forceCenter(width / 2, height / 2))
          .on("tick", ticked);

        // Margens para restringir nós ao espaço
        const margin = 20;

        // Criando as arestas
        const link = svg.append("g")
          .attr("stroke-opacity", 0.6)
          .selectAll("line")
          .data(data.links)
          .enter()
          .append("line")
          .attr("stroke", "gray")
          .attr("stroke-width", d => Math.max(1, d.weight)); // Largura proporcional ao peso

        // Adicionando texto com os pesos das arestas
        const linkText = svg.append("g")
          .selectAll("text")
          .data(data.links)
          .enter()
          .append("text")
          .attr("font-size", "12px")
          .attr("fill", "black")
          .attr("text-anchor", "middle")
          .text(d => d.weight);

        // Criando os nós
        const node = svg.append("g")
          .attr("stroke", "#fff")
          .attr("stroke-width", 1.5)
          .selectAll("g")
          .data(data.nodes)
          .enter()
          .append("g")
          .call(d3.drag()
            .on("start", dragstarted)
            .on("drag", dragged)
            .on("end", dragended));

        // Adiciona círculos nos nós
        node.append("circle")
          .attr("r", 15)
          .attr("fill", d => (d.isCurrentUser ? "yellow" : "#69b3a2"));

        // Exibindo tooltip com o nome do nó
        node.append("title").text(d => d.name);

        // Atualiza as posições na simulação
        function ticked() {
          link
            .attr("x1", d => Math.max(margin, Math.min(width - margin, d.source.x)))
            .attr("y1", d => Math.max(margin, Math.min(height - margin, d.source.y)))
            .attr("x2", d => Math.max(margin, Math.min(width - margin, d.target.x)))
            .attr("y2", d => Math.max(margin, Math.min(height - margin, d.target.y)));

          linkText
            .attr("x", d => (d.source.x + d.target.x) / 2)
            .attr("y", d => (d.source.y + d.target.y) / 2);

          node.attr("transform", d => {
            d.x = Math.max(margin, Math.min(width - margin, d.x));
            d.y = Math.max(margin, Math.min(height - margin, d.y));
            return `translate(${d.x},${d.y})`;
          });
        }

        // Funções para arrastar nós
        function dragstarted(event, d) {
          if (!event.active) simulation.alphaTarget(0.3).restart();
          d.fx = d.x;
          d.fy = d.y;
        }

        function dragged(event, d) {
          d.fx = Math.max(margin, Math.min(width - margin, event.x));
          d.fy = Math.max(margin, Math.min(height - margin, event.y));
        }

        function dragended(event, d) {
          if (!event.active) simulation.alphaTarget(0);
          d.fx = null;
          d.fy = null;
        }
      })
      .catch(error => console.error("Erro ao carregar os dados do grafo:", error));
  });
</script>

