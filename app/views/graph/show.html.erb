<!-- Container centralizado -->
<div class="d-flex justify-content-center align-items-center" style="height: 100vh; margin-top: 0;">
  <!-- Div do grafo -->
  <div id="graph" style="width: 80%; height: 80%; position: relative;">
    <!-- O svg será inserido aqui -->
  </div>
</div>

<!-- Adicionando a biblioteca D3 -->
<script src="https://d3js.org/d3.v6.min.js"></script>

<!-- Script para renderizar o grafo -->
<script>
  document.addEventListener("DOMContentLoaded", function () {
    fetch("/graph_data")
      .then((response) => response.json())
      .then((data) => {
        const graphContainer = document.getElementById('graph');
        const width = graphContainer.clientWidth;
        const height = graphContainer.clientHeight;

        // Cria o SVG
        const svg = d3.select(graphContainer)
          .append("svg")
          .attr("width", width)
          .attr("height", height)
          .attr("viewBox", `0 0 ${width} ${height}`)
          .attr("preserveAspectRatio", "xMinYMin meet");

        // Definindo uma marker para as setas
        svg.append("defs").selectAll("marker")
          .data(["end", "bidirectional"])
          .enter()
          .append("marker")
          .attr("id", d => d)
          .attr("viewBox", "0 -5 10 10")
          .attr("refX", 15)
          .attr("refY", 0)
          .attr("markerWidth", 6)
          .attr("markerHeight", 6)
          .attr("orient", "auto")
          .append("path")
          .attr("d", "M0,-5L10,0L0,5")
          .attr("fill", d => (d === "bidirectional" ? "green" : "red"));

        // Configuração da simulação de força
        const simulation = d3.forceSimulation(data.nodes)
          .force("link", d3.forceLink(data.links).id(d => d.id).distance(100))
          .force("charge", d3.forceManyBody().strength(-200))
          .force("center", d3.forceCenter(width / 2, height / 2));

        // Criando as arestas como linhas direcionais
        const link = svg.append("g")
          .attr("stroke-opacity", 0.6)
          .selectAll("line")
          .data(data.links)
          .enter()
          .append("line")
          .attr("stroke", d => (d.bidirectional ? "green" : "red"))
          .attr("stroke-width", 3)
          .attr("marker-end", d => d.bidirectional ? "url(#bidirectional)" : "url(#end)");

        // Criando os nós
        const node = svg.append("g")
          .attr("stroke", "#fff")
          .attr("stroke-width", 1.5)
          .selectAll("g")
          .data(data.nodes)
          .enter()
          .append("g")
          .call(d3.drag()
            .on("start", (event, d) => {
              if (!event.active) simulation.alphaTarget(0.3).restart();
              d.fx = d.x;
              d.fy = d.y;
            })
            .on("drag", (event, d) => {
              d.fx = event.x;
              d.fy = event.y;
            })
            .on("end", (event, d) => {
              if (!event.active) simulation.alphaTarget(0);
              d.fx = null;
              d.fy = null;
            })
          );

        // Adiciona círculos nos nós
        node.append("circle")
          .attr("r", 15)
          .attr("fill", "#69b3a2");

        // Exibindo tooltip com o nome do nó
        node.append("title").text(d => d.name);

        // Atualizando posições na simulação
        simulation.on("tick", () => {
          link
            .attr("x1", d => d.source.x)
            .attr("y1", d => d.source.y)
            .attr("x2", d => d.target.x)
            .attr("y2", d => d.target.y);

          node.attr("transform", d => `translate(${d.x},${d.y})`);
        });
      })
      .catch(error => console.error("Erro ao carregar os dados do grafo:", error));
  });
</script>
